@{
    ViewData["Title"] = "Employee Dashboard";
}
<!--Claude AI was used to fix alignment issues and recommended the addition of the JS at the bottom for error messages and validation,
    as well as added the JS to help display the products along with the farmer details as I was having issues with that, and helped fix the issue
    of products not being filtered properly in the Results table
-->
<style>
    .border-right {
        border-right: 1px solid #dee2e6;
    }

    .col-md-6 {
        padding: 20px;
        min-height: 70vh;
    }

    h1 {
        margin-bottom: 30px;
        font-size: 2.5rem;
    }

    footer {
        display: none;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .btn-primary {
        background-color: #4CAF50;
        border-color: #4CAF50;
        padding: 12px 30px;
        width: 100%;
        max-width: 300px;
        display: block;
        margin: 0 auto;
    }

        .btn-primary:hover {
            background-color: #45a049;
            border-color: #45a049;
        }

    .btn-outline-primary {
        color: #4CAF50;
        border-color: #4CAF50;
        padding: 8px 20px;
    }

        .btn-outline-primary:hover {
            background-color: #4CAF50;
            color: white;
        }

    .card {
        margin-bottom: 30px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        border-radius: 8px;
    }

    .card-header {
        background-color: #f8f9fa;
        padding: 15px 20px;
        border-bottom: 1px solid #dee2e6;
        border-radius: 8px 8px 0 0;
    }

    .card-body {
        padding: 20px;
    }

    .table {
        margin-top: 15px;
    }

        .table th {
            background-color: #f8f9fa;
        }

    .badge {
        font-size: 85%;
        padding: 5px 10px;
        border-radius: 30px;
    }

    .badge-success {
        background-color: #28a745;
        color: white;
    }

    .badge-warning {
        background-color: #ffc107;
        color: #212529;
    }

    .badge-info {
        background-color: #17a2b8;
        color: white;
    }

    .date-range-container {
        display: flex;
        gap: 10px;
    }

        .date-range-container .form-control {
            width: 100%;
        }

    /* New styles for the modified layout */
    .full-width-section {
        width: 100%;
        padding: 0 20px;
    }

    .form-section {
        max-width: 85%;
        margin: 0 auto 40px auto;
    }
</style>

<div class="container-fluid">
    <!-- Centered Header -->
    <div class="row mb-4">
        <div class="col-12 text-center">
            <h1>Welcome to the Employee Dashboard</h1>
        </div>
    </div>

    <!-- Add Farmer Form Section -->
    <div class="row">
        <div class="col-12">
            <div class="form-section">
                <h2 class="mb-4 text-center">Add Farmer</h2>
                <div class="card">
                    <div class="card-header">
                        <h4>Farmer Registration Form</h4>
                    </div>
                    <div class="card-body">
                        @if (ViewBag.Error != null)
                        {
                            <div class="alert alert-danger" role="alert">
                                @ViewBag.Error
                            </div>
                        }
                        @if (ViewBag.Success != null)
                        {
                            <div class="alert alert-success" role="alert">
                                @ViewBag.Success
                            </div>
                        }
                        <form asp-action="AddFarmer" asp-controller="Employee" method="post">
                            @Html.AntiForgeryToken()
                            <div class="form-group">
                                <label for="FarmerUserName">Username (Email)</label>
                                <input type="email" class="form-control" id="FarmerUserName" name="FarmerUserName"
                                       placeholder="farmer@example.com" required>
                            </div>
                            <div class="form-group">
                                <label for="FarmerPassword">Password</label>
                                <input type="password" class="form-control" id="FarmerPassword" name="FarmerPassword" required>
                            </div>
                            <div class="form-group">
                                <label for="FarmerContactNum">Contact Number</label>
                                <input type="tel" class="form-control" id="FarmerContactNum" name="FarmerContactNum"
                                       placeholder="e.g., 0123456789" required>
                            </div>
                            <div class="form-group text-center">
                                <button type="submit" class="btn btn-primary">Register Farmer</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter and Results Section -->
    <div class="row">
        <div class="col-12 full-width-section">
            <div style="margin-bottom: 20px;">
                <h2 class="mb-4 text-center">View Farmers/Products</h2>
            </div>

            <!-- Filter Card -->
            <div class="card">
                <div class="card-header">
                    <h4>Filter Options</h4>
                </div>
                <div class="card-body">
                    <form id="filterForm">
                        <div class="form-group">
                            <label for="farmerName">Farmer Name</label>
                            <input type="text" class="form-control" id="farmerName" placeholder="Search by farmer name">
                        </div>

                        <div class="form-group">
                            <label for="productCategory">Product Category</label>
                            <select class="form-control" id="productCategory">
                                <option value="">All Categories</option>
                                <option value="Vegetables">Vegetables</option>
                                <option value="Fruits">Fruits</option>
                                <option value="Dairy">Dairy</option>
                                <option value="Grains">Grains</option>
                                <option value="Livestock">Livestock</option>
                                <option value="Poultry">Poultry</option>
                                <option value="Organic">Organic</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Date Range</label>
                            <div class="date-range-container">
                                <div>
                                    <label for="fromDate">From</label>
                                    <input type="date" class="form-control" id="fromDate">
                                </div>
                                <div>
                                    <label for="toDate">To</label>
                                    <input type="date" class="form-control" id="toDate">
                                </div>
                            </div>
                        </div>

                        <div class="text-center">
                            <button type="button" class="btn btn-primary">Apply Filters</button>
                            <button type="button" class="btn btn-outline-primary ml-2">Reset</button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Results Table -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>Farmers/Products List</h4>
                    <span class="badge badge-info">0 Results</span>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Farmer</th>
                                    <th>Products</th>
                                    <th>Production Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Data will be populated dynamically -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log("DOM fully loaded and parsed");
            // Get filter elements
            const farmerNameInput = document.getElementById('farmerName');
            const productCategorySelect = document.getElementById('productCategory');
            const fromDateInput = document.getElementById('fromDate');
            const toDateInput = document.getElementById('toDate');
            // Use more specific selector for the Apply Filter button
            const applyFilterBtn = document.querySelector('#filterForm .btn-primary');
            const resetFilterBtn = document.querySelector('#filterForm .btn-outline-primary');
            const resultsCount = document.querySelector('.badge-info');
            const resultsTable = document.querySelector('table tbody');

            // Initialize with empty filter to load all data
            loadFarmersWithProducts();

            // Add event listeners with console logs for debugging
            if (applyFilterBtn) {
                console.log("Apply filter button found:", applyFilterBtn);
                applyFilterBtn.addEventListener('click', function (e) {
                    console.log("Apply filter button clicked");
                    e.preventDefault(); // Prevent form submission
                    loadFarmersWithProducts();
                });
            } else {
                console.error("Apply filter button not found!");
            }

            if (resetFilterBtn) {
                resetFilterBtn.addEventListener('click', function (e) {
                    console.log("Reset button clicked");
                    e.preventDefault(); // Prevent form submission
                    farmerNameInput.value = '';
                    productCategorySelect.value = '';
                    fromDateInput.value = '';
                    toDateInput.value = '';
                    loadFarmersWithProducts();
                });
            } else {
                console.error("Reset button not found!");
            }

            // Direct button click listeners as backup
            document.querySelectorAll('#filterForm button').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    console.log("Button clicked:", this.textContent.trim());
                    if (this.textContent.trim() === "Apply Filters") {
                        loadFarmersWithProducts();
                    } else if (this.textContent.trim() === "Reset") {
                        farmerNameInput.value = '';
                        productCategorySelect.value = '';
                        fromDateInput.value = '';
                        toDateInput.value = '';
                        loadFarmersWithProducts();
                    }
                });
            });

            // Add event listeners for "Enter" key on input fields
            [farmerNameInput, fromDateInput, toDateInput].forEach(input => {
                input.addEventListener('keypress', function (e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        loadFarmersWithProducts();
                    }
                });
            });

            // Function to load farmers with products
            function loadFarmersWithProducts() {
                const farmerName = farmerNameInput.value.trim();
                const productCategory = productCategorySelect.value;
                const fromDate = fromDateInput.value ? new Date(fromDateInput.value) : null;
                const toDate = toDateInput.value ? new Date(toDateInput.value) : null;

                // Validate date range
                if (fromDate && toDate && fromDate > toDate) {
                    alert('From date cannot be later than To date');
                    return;
                }

                // Show loading indicator
                resultsTable.innerHTML = '<tr><td colspan="3" class="text-center">Loading...</td></tr>';

                // Build query string
                let queryParams = new URLSearchParams();
                if (farmerName) queryParams.append('farmerName', farmerName);
                if (productCategory) queryParams.append('productCategory', productCategory);
                if (fromDate) queryParams.append('fromDate', fromDateInput.value);
                if (toDate) queryParams.append('toDate', toDateInput.value);

                // Make AJAX request
                fetch(`/Employee/GetFarmersWithProducts?${queryParams.toString()}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            displayFarmersWithProducts(data.data);
                            resultsCount.textContent = `${data.count} Results`;
                        } else {
                            console.error('Error:', data.message);
                            resultsTable.innerHTML = `<tr><td colspan="3" class="text-center text-danger">Error: ${data.message}</td></tr>`;
                            resultsCount.textContent = '0 Results';
                        }
                    })
                    .catch(error => {
                        console.error('Fetch error:', error);
                        resultsTable.innerHTML = '<tr><td colspan="3" class="text-center text-danger">Error fetching data. Please try again.</td></tr>';
                        resultsCount.textContent = '0 Results';
                    });
            }

            // Function to display farmers with products in the table
            function displayFarmersWithProducts(data) {
                resultsTable.innerHTML = '';

                if (!data || data.length === 0) {
                    resultsTable.innerHTML = '<tr><td colspan="3" class="text-center">No results found</td></tr>';
                    return;
                }

                // Group by farmer
                const farmerGroups = {};
                data.forEach(item => {
                    if (!farmerGroups[item.farmerId]) {
                        farmerGroups[item.farmerId] = {
                            farmer: item.farmerUserName,
                            contactNum: item.farmerContactNum,
                            products: []
                        };
                    }

                    // Only add product if it exists
                    if (item.productName && item.productName !== "No products") {
                        let productDate = 'N/A';
                        if (item.productionDate) {
                            try {
                                productDate = new Date(item.productionDate).toLocaleDateString();
                            } catch (e) {
                                console.error('Invalid date format:', item.productionDate);
                            }
                        }

                        farmerGroups[item.farmerId].products.push({
                            name: item.productName,
                            category: item.productCategory,
                            date: productDate
                        });
                    }
                });

                // Create table rows
                Object.values(farmerGroups).forEach(group => {
                    const row = document.createElement('tr');

                    // Farmer column with contact number
                    const farmerCell = document.createElement('td');
                    farmerCell.innerHTML = `<strong>${group.farmer || 'Unknown'}</strong><br><small>${group.contactNum || 'No contact'}</small>`;
                    row.appendChild(farmerCell);

                    // Products column
                    const productsCell = document.createElement('td');
                    if (!group.products || group.products.length === 0) {
                        productsCell.textContent = 'No products';
                    } else {
                        const productsList = document.createElement('ul');
                        productsList.className = 'list-unstyled mb-0';
                        group.products.forEach(product => {
                            const productItem = document.createElement('li');
                            productItem.innerHTML = `<span class="badge badge-success">${product.category || 'Uncategorized'}</span> ${product.name || 'Unnamed product'}`;
                            productsList.appendChild(productItem);
                        });
                        productsCell.appendChild(productsList);
                    }
                    row.appendChild(productsCell);

                    // Production dates column
                    const datesCell = document.createElement('td');
                    if (!group.products || group.products.length === 0) {
                        datesCell.textContent = 'N/A';
                    } else {
                        const datesList = document.createElement('ul');
                        datesList.className = 'list-unstyled mb-0';
                        group.products.forEach(product => {
                            const dateItem = document.createElement('li');
                            dateItem.textContent = product.date;
                            datesList.appendChild(dateItem);
                        });
                        datesCell.appendChild(datesList);
                    }
                    row.appendChild(datesCell);

                    resultsTable.appendChild(row);
                });
            }

            // Client-side filtering function (backup in case server-side filtering isn't working)
            function applyClientSideFilters(data) {
                const farmerName = farmerNameInput.value.toLowerCase().trim();
                const productCategory = productCategorySelect.value.toLowerCase();
                const fromDate = fromDateInput.value ? new Date(fromDateInput.value) : null;
                const toDate = toDateInput.value ? new Date(toDateInput.value) : null;

                // Apply filters
                return data.filter(item => {
                    // Filter by farmer name
                    if (farmerName && !item.farmerUserName.toLowerCase().includes(farmerName)) {
                        return false;
                    }

                    // Filter by product category
                    if (productCategory && item.productCategory &&
                        item.productCategory.toLowerCase() !== productCategory) {
                        return false;
                    }

                    // Filter by date range
                    if (item.productionDate) {
                        const productDate = new Date(item.productionDate);
                        if (fromDate && productDate < fromDate) return false;
                        if (toDate) {
                            // Add one day to include the end date in the range
                            const adjustedToDate = new Date(toDate);
                            adjustedToDate.setDate(adjustedToDate.getDate() + 1);
                            if (productDate > adjustedToDate) return false;
                        }
                    } else if (fromDate || toDate) {
                        // If we're filtering by date but this item has no date, exclude it
                        return false;
                    }

                    return true;
                });
            }
        });
    </script>
}